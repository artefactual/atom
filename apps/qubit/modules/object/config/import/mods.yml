# This file is part of Access to Memory (AtoM).
#
# Access to Memory (AtoM) is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Access to Memory (AtoM) is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along with
# Access to Memory (AtoM); if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# MODS XML IMPORT FILTER MAPPINGS
#
# @package AccesstoMemory
# @subpackage object import
# @author Peter Van Garderen <peter@artefactual.com>
# @version svn: $Id:$

information_object:
  XPath:  "//mods"
  Object:  InformationObject
  # define an axis for the parent object; if no node is matched here, the object is rooted if possible

  Methods:
    collection_type:
      XPath:   "."    # not really a match, just use self
      Method:  setCollectionTypeId
      Parameters: [QubitTerm::PUBLISHED_MATERIAL_ID]

    sourceStandard:
      XPath: "." # not really a match, just use self
      Method: setSourceStandard
      Parameters: ["'http://www.loc.gov/standards/mods/v3/mods-3-5.xsd'"]

    publicationStatus:
      XPath: "." # not really a match, just use self
      Method: setStatus
      Parameters: ["array('typeId' => QubitTerm::STATUS_TYPE_PUBLICATION_ID, 'statusId' => sfConfig::get('app_defaultPubStatus', QubitTerm::PUBLICATION_STATUS_DRAFT_ID))"]


    # each of the following XPath expressions are relative to the current matched node:

    title:
      XPath: "titleInfo/title"
      Method: setTitle

    dates:
      XPath: "originInfo/dateCreated"
      Method: setDates
      Parameters: [$nodeValue, "$options = array('date_type' => 'creation')"]

    controlaccess_subject:
      XPath: "subject"
      Method: setTermRelationByName
      Parameters: [$nodeValue, "$options = array('taxonomyId' => QubitTaxonomy::SUBJECT_ID, 'source' => $importDOM->xpath->query('@source', $domNode2)->item(0)->nodeValue)"]

    identifier:
      XPath: "identifier"
      Method: setIdentifier

    # langmaterial:
      # XPath: "language"
      # Method:

    repository:
      XPath: "(location/physicalLocation)[2]"
      Method: setRepositoryByName

    creator:
      XPath: "name/namePart"
      Method: setActorByName
      Parameters: [$nodeValue, "$options = array('event_type_id' => QubitTerm::CREATION_ID)"]

    accessrestrict:
      XPath: "accessCondition"
      Method: setAccessConditions

    digital_object:
      XPath: "(location/url)[1]"
      Method: importDigitalObjectFromUri
